<script target="server">
    console.log('[history.yaspa] This script is executed on the server');
    //Setup intercom
    const intercom = component.getIntercom()
    intercom.on('test', (data, sender) => {
        console.log('[history.yaspa] Received test event from client: ', data.message);
        sender.emit('test', {message: 'Received!'});
        intercom.getConnections().forEach((connection) => {
            connection.emit('test', {message: 'Update to all clients'});
        });
    });
</script>

<h1>This is the history screen</h1>

<button id="send_to_ssc">Send event to server-side-component</button>

<div id="child-component"></div>

<style>
    h1 {
        color: white
    }
</style>

<script>
    spa.init((component, data, urlPath) => {
        //Test intercom

        const intercom = component.getIntercom()

        component.getElementById('send_to_ssc').addEventListener('click', () => {
            intercom.emit('test', {message: 'Hello from client'});
        });

        intercom.on('test', (data, sender) => {
            console.log('[history.yaspa] Received test event from server-side-component: ', data.message);
        });

        //Finish test

        spa.history.push('history', undefined)

        //remove first element from urlPath array and return it
        const pathElement = urlPath.shift()
        let componentToLoad;

        switch (pathElement) {
            case 'comp1':
                componentToLoad = 'comp1'
                break;
            case 'comp2':
                componentToLoad = 'comp2'
                break;
            case 'comp3':
                componentToLoad = 'comp3'
                break;
            default:
                componentToLoad = 'comp1'
                break;
        }

        const navigator = component.getNavigator()

        const loadChildComponent = (componentToLoad) => {
            spa.injectComponent(component.getElementById('child-component'), componentToLoad, null, { navigator })
        }

        navigator.registerRoute('comp1', (data) => {
            loadChildComponent('test/comp1')
        })
        navigator.registerRoute('comp2', (data) => {
            loadChildComponent('test/comp2')
        })
        navigator.registerRoute('comp3', (data) => {
            loadChildComponent('test/comp3')
        })

        navigator.navigateTo(componentToLoad)
    })
</script>